# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: playwright-tests
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: playwright-tests
#   template:
#     metadata:
#       labels:
#         app: playwright-tests
#     spec:
#       containers:
#         - name: playwright
#           image: jack2153/pw-1  # Ensure this image exists in the registry or Minikube's local Docker
#           imagePullPolicy: IfNotPresent
#           command: ["npx", "playwright", "test","example.spec.js"]
#           workingDir: /app  # Optional: Specify if your Playwright tests are inside a specific directory
#           resources:
#             limits:
#               memory: "3Gi"
#               cpu: "1"
#             requests:
#               memory: "1Gi"
#               cpu: "750m"
        
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: playwright-tests
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: playwright-tests
#   template:
#     metadata:
#       labels:
#         app: playwright-tests
#     spec:
#       volumes:
#         - name: test-results
#           persistentVolumeClaim:
#             claimName: test-results-pvc
#         - name: shared-data
#           persistentVolumeClaim:
#             claimName: playwright-pvc
#       containers:
#         - name: playwright-1
#           image: jack2153/playwright-tests-1:latest
#           imagePullPolicy: IfNotPresent
#           command: ["/bin/sh", "-c"]
#           args: ["npx playwright test example.spec.js"]
#           workingDir: /app
#           volumeMounts:
#             - name: test-results
#               mountPath: /app/test-results
#             - name: shared-data
#               mountPath: /app/shared
#           resources:
#             limits:
#               memory: "1Gi"
#               cpu: "1"
#             requests:
#               memory: "500Mi"
#               cpu: "250m"
#         - name: playwright-2
#           image: jack2153/playwright-tests-1:latest
#           imagePullPolicy: IfNotPresent
#           command: ["/bin/sh", "-c"]
#           args: ["npx playwright test example2.spec.js"]
#           workingDir: /app
#           volumeMounts:
#             - name: test-results
#               mountPath: /app/test-results
#             - name: shared-data
#               mountPath: /app/shared
#           resources:
#             limits:
#               memory: "1Gi"
#               cpu: "1"
#             requests:
#               memory: "500Mi"
#               cpu: "250m"
#         - name: playwright-3
#           image: jack2153/playwright-tests-1:latest
#           imagePullPolicy: IfNotPresent
#           command: ["/bin/sh", "-c"]
#           args: ["npx playwright test example3.spec.js"]
#           workingDir: /app
#           volumeMounts:
#             - name: test-results
#               mountPath: /app/test-results
#             - name: shared-data
#               mountPath: /app/shared
#           resources:
#             limits:
#               memory: "1Gi"
#               cpu: "1"
#             requests:
#               memory: "500Mi"
#               cpu: "250m"

apiVersion: batch/v1
kind: Job
metadata:
  name: playwright-tests
spec:
  parallelism: 25
  completions: 25
  template:
    metadata:
      labels:
        app: playwright-tests
    spec:
      restartPolicy: Never
      containers:
        - name: playwright
          image: jack2153/pw-2:latest
          imagePullPolicy: Always  # Force Kubernetes to pull the latest image
          command: ["/bin/sh", "-c"]
          args:
            - |
              test_file="/app/tests/example$((JOB_COMPLETION_INDEX + 1)).spec.js"
              echo "Running: $test_file"
              if [ -f "$test_file" ]; then
                npx playwright test "$test_file"
              else
                echo "Error: $test_file not found!"
                exit 1
              fi
          workingDir: /app  # Ensure the correct working directory
          resources:
            limits:
              memory: "1Gi"
              cpu: "1"
            requests:
              memory: "500Mi"
              cpu: "250m"


